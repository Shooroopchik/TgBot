# bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# üîß –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò: –ø–æ–∫–∞ True ‚Äî –∑–∞–∫–∞–∑—ã –∏–¥—É—Ç —Ç–µ–±–µ
DEBUG_MODE = True

# üßë‚Äçüíª –¢–≤–æ–π ID –∏–ª–∏ username (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
DEV_CHAT = "@Shooroopchik"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π username

# üëî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–Ω–∞ –±—É–¥—É—â–µ–µ)
ADMIN_CHAT = "@nadezda_bolshaya_elnya"  # username –∞–¥–º–∏–Ω–∞ (–ø–æ—Ç–æ–º —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å)

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "apple": {"name": "–Ø–±–ª–æ–∫–∏", "price": 120},
    "milk": {"name": "–ú–æ–ª–æ–∫–æ", "price": 80},
    "bread": {"name": "–•–ª–µ–±", "price": 40},
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
def create_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton(f"{p['name']} ‚Äî {p['price']} —Ä—É–±", callback_data=key)]
        for key, p in PRODUCTS.items()
    ]
    return InlineKeyboardMarkup(keyboard)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ /order, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑."
    )

# /order ‚Äî –Ω–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = create_menu_keyboard()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üõí\n"
        "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    product_key = query.data
    if product_key in PRODUCTS:
        context.user_data['product'] = product_key
        product = PRODUCTS[product_key]
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{product['name']}*\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
            parse_mode="Markdown"
        )
        context.user_data['step'] = 'quantity'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí –∏–º—è ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω)
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    step = context.user_data.get('step')

    if step == 'quantity':
        if not text.isdigit() or int(text) <= 0:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return
        context.user_data['quantity'] = int(text)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        context.user_data['step'] = 'name'

    elif step == 'name':
        context.user_data['name'] = text
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        context.user_data['step'] = 'phone'

    elif step == 'phone':
        context.user_data['phone'] = text
        user = update.effective_user
        product_key = context.user_data['product']
        product = PRODUCTS[product_key]
        quantity = context.user_data['quantity']
        name = context.user_data['name']
        phone = context.user_data['phone']
        total = product['price'] * quantity

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        order_message = (
            f"üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: {user.id})\n"
            f"–¢–æ–≤–∞—Ä: {product['name']} ‚Äî {product['price']} —Ä—É–±\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–°—É–º–º–∞: {total} —Ä—É–±\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–í—Ä–µ–º—è: {update.message.date.strftime('%H:%M %d.%m.%Y')}"
        )

        # üéØ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
        if DEBUG_MODE:
            # üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –∑–∞–∫–∞–∑ –∏–¥—ë—Ç —Ç–µ–±–µ
            await context.bot.send_message(
                chat_id=DEV_CHAT,
                text=order_message,
                parse_mode="Markdown"
            )
        else:
            # ‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω ‚Äî –∑–∞–∫–∞–∑ –∏–¥—ë—Ç –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_CHAT,
                text=order_message,
                parse_mode="Markdown"
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–°—É–º–º–∞: {total} —Ä—É–±\n"
            f"–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {name}! üéâ"
        )

        # –°–±—Ä–æ—Å
        context.user_data.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("order", order))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()

if __name__ == "__main__":
    main()